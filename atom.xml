<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sonho Creek</title>
  
  <subtitle>Casual notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-11T05:03:28.471Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sonho Creek</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>松索来金的软件</title>
    <link href="http://yoursite.com/2019/04/11/%E6%9D%BE%E7%B4%A2%E6%9D%A5%E9%87%91%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/04/11/松索来金的软件/</id>
    <published>2019-04-11T04:56:11.000Z</published>
    <updated>2019-04-11T05:03:28.471Z</updated>
    
    <content type="html"><![CDATA[<p>自己经常逛一些爱q或小刀网，发现上面的好多活动挺好，就打算看看有没有更多类似这种的，于是上网搜索，偶然间看到了这款软件</p><p>了解了下，感觉还不错就付费下载了下，玩了一段时间，那段时间也没做什么就是签到，到了今天发现居然回本了，就感慨下</p><p>我感觉还行，最近再看他们里面的原创文章，学习怎么建站</p><p>具体想要了解的话可以去百度，或者<a href="https://docs.qq.com/doc/DSElNZ2h4YUN0ZEpo" target="_blank" rel="noopener">这个地址看看</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自己经常逛一些爱q或小刀网，发现上面的好多活动挺好，就打算看看有没有更多类似这种的，于是上网搜索，偶然间看到了这款软件&lt;/p&gt;
&lt;p&gt;了解了下，感觉还不错就付费下载了下，玩了一段时间，那段时间也没做什么就是签到，到了今天发现居然回本了，就感慨下&lt;/p&gt;
&lt;p&gt;我感觉还行，最
      
    
    </summary>
    
    
      <category term="软件" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>项目常用方法</title>
    <link href="http://yoursite.com/2019/04/10/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/10/项目常用方法/</id>
    <published>2019-04-10T03:41:37.000Z</published>
    <updated>2019-04-10T03:42:51.462Z</updated>
    
    <content type="html"><![CDATA[  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">  // 隐藏手机号中间4位</span><br><span class="line">    formatPhone(phone) &#123;</span><br><span class="line">        phone += &apos;&apos;;</span><br><span class="line">        return phone.replace(/(\d&#123;3&#125;)\d*(\d&#123;4&#125;)/g, &apos;$1***$2&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 隐藏身份证号中11位</span><br><span class="line">    formatIdentity(number) &#123;</span><br><span class="line">        number += &apos;&apos;;</span><br><span class="line">        return number.replace(/(\d&#123;3&#125;)\d*(\d&#123;4&#125;)/g, &apos;$1***********$2&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">     // 格式化金额,单位:分(eg:430分=4.30元)</span><br><span class="line">    formatFee(fee, suffix = &apos;&apos;) &#123;</span><br><span class="line">        if (!fee) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return Number(fee).toFixed(2) + suffix;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 格式化公里（eg:3000 = 3公里）</span><br><span class="line">    formatMileage(mileage, text) &#123;</span><br><span class="line">        if (!mileage) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if (mileage &gt;= 1000) &#123;</span><br><span class="line">            text = text || &quot; km&quot;;</span><br><span class="line">            return Math.floor(mileage / 100) / 10 + text;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            text = text || &quot; m&quot;;</span><br><span class="line">            return mileage + text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    /* 邮箱校验*/</span><br><span class="line">export function isWscnEmail(str) &#123;</span><br><span class="line">  const reg = /^[a-z0-9](?:[-_.+]?[a-z0-9]+)*@[a-z0-9]&#123;2,10&#125;\.[a-z]&#123;2,5&#125;$/i</span><br><span class="line">  return reg.test(str.trim())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 合法uri*/</span><br><span class="line">export function validateURL(textval) &#123;</span><br><span class="line">  const urlregex = /^(https?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?&apos;\\+&amp;%$#=~_-]+))*$/</span><br><span class="line">  return urlregex.test(textval)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 小写字母*/</span><br><span class="line">export function validateLowerCase(str) &#123;</span><br><span class="line">  const reg = /^[a-z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 验证码*/</span><br><span class="line">export function validateAuthCode(str) &#123;</span><br><span class="line">  const reg = /^[a-z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 大写字母*/</span><br><span class="line">export function validateUpperCase(str) &#123;</span><br><span class="line">  const reg = /^[A-Z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 大小写字母*/</span><br><span class="line">export function validatAlphabets(str) &#123;</span><br><span class="line">  const reg = /^[A-Za-z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line">/* 绑定地址验证*/</span><br><span class="line">export function validatOutAdress(str) &#123;</span><br><span class="line">  if (typeof str === &apos;number&apos;) &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line">  return /^[a-zA-Z\d]&#123;30,40&#125;$/.test(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 手机验证*/</span><br><span class="line">export function validatPhone(str) &#123;</span><br><span class="line">  const reg = /^1(3|4|5|6|7|8)\d&#123;9&#125;$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Double型数据*/</span><br><span class="line">export function validatDouble(str) &#123;</span><br><span class="line">  const reg = /^[-\+]?\d+(\.\d+)?$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 只保留后四位*/</span><br><span class="line">export function validatLatterJudge(str) &#123;</span><br><span class="line">  const reg = /^\d+(\.\d&#123;1,4&#125;)?$/</span><br><span class="line">  if (str.toString().length &gt; 10 &amp;&amp; str.toString().indexOf(&apos;.&apos;) == -1) &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line">  if (str.toString().indexOf(&apos;.&apos;) &gt; -1) &#123;</span><br><span class="line">    const index = str.toString().indexOf(&apos;.&apos;)</span><br><span class="line">    if (index &gt; 10) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return reg.test(str)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return reg.test(str)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 只保留小数点后8位*/</span><br><span class="line">export function validatLatterEight(str) &#123;</span><br><span class="line">  const reg = /^\d+(\.\d&#123;1,8&#125;)?$/</span><br><span class="line">  // 判断小数点前几位</span><br><span class="line">  if (str.toString().length &gt; 10 &amp;&amp; str.toString().indexOf(&apos;.&apos;) == -1) &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line">  if (str.toString().indexOf(&apos;.&apos;) &gt; -1) &#123;</span><br><span class="line">    const index = str.toString().indexOf(&apos;.&apos;)</span><br><span class="line">    if (index &gt; 10) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return reg.test(str)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return reg.test(str)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 验证是否是大于6位数小于20位的数字</span><br><span class="line">export function isDY6Num(pone) &#123;</span><br><span class="line">  const reg = /^[0-9\d]&#123;6,20&#125;$/</span><br><span class="line">  return reg.test(pone)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 判断数组是否在数组中</span><br><span class="line">export function contains(arr, val) &#123;</span><br><span class="line">  return arr.indexOf(val) !== -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组排序</span><br><span class="line">export function sort(arr, type = 1) &#123;</span><br><span class="line">  return arr.sort((a, b) =&gt; &#123;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">      case 1:</span><br><span class="line">        return a - b</span><br><span class="line">      case 2:</span><br><span class="line">        return b - a</span><br><span class="line">      case 3:</span><br><span class="line">        return Math.random() - 0.5</span><br><span class="line">      default:</span><br><span class="line">        return arr</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
          &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
      <category term="-vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>flex事例</title>
    <link href="http://yoursite.com/2019/04/10/flex%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/04/10/flex练习/</id>
    <published>2019-04-10T03:05:18.761Z</published>
    <updated>2019-04-10T03:05:18.761Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head><meta name="generator" content="Hexo 3.8.0">    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <title>flex布局练习</title></head><style>    html,    body {        height: 100%;    }    body {        display: flex;        background: linear-gradient(top, #222, #333);        background: -webkit-linear-gradient(top, #222, #333);        justify-content: center;        align-items: center;        flex-wrap: wrap;        align-content: center;    }    [class$="face"] {        display: flex;        margin: 14px;        width: 104px;        height: 104px;        padding: 4px;        background: #e7e7e7;        border-radius: 10%;        box-shadow: inset 0 5px white,        inset 5px 0 #d7d7d7,        inset -5px 0 #bbbb,        inset 0 -5px #d7d7d7;    }    .item {        display: block;        width: 24px;        height: 24px;        border-radius: 50%;        margin: 4px;        background-color: #333;        box-shadow: inset 0 3px #111;    }    .first-face {        justify-content: center;        align-items: center;    }    .second-face {        justify-content: space-between;    }    .second-face .item:nth-child(2) {        align-self: flex-end;    }    .third-face {        justify-content: space-between;    }    .third-face .item:nth-child(2) {        align-self: center;    }    .third-face .item:nth-child(3) {        align-self: flex-end;    }    .fourth-face,    .fifth-face,    .sixth-face {        justify-content: space-between;    }    .fourth-face .column,    .fifth-face .column,    .sixth-face .column {        display: flex;        flex-direction: column;        justify-content: space-between    }    .fifth-face .column:nth-child(2) {        /* align-self: center; */        justify-content: center;    }</style><body>    <div class="first-face">        <span class="item"></span>    </div>    <div class="second-face">        <span class="item"></span>        <span class="item"></span>    </div>    <div class="third-face">        <span class="item"></span>        <span class="item"></span>        <span class="item"></span>    </div>    <div class="fourth-face">        <div class="column">            <span class="item"></span>            <span class="item"></span>        </div>        <div class="column">            <span class="item"></span>            <span class="item"></span>        </div>    </div>    <div class="fifth-face">        <div class="column">            <span class="item"></span>            <span class="item"></span>        </div>        <div class="column">            <span class="item"></span>        </div>        <div class="column">            <span class="item"></span>            <span class="item"></span>        </div>    </div>    <div class="sixth-face">        <div class="column">            <span class="item"></span>            <span class="item"></span>            <span class="item"></span>        </div>        <div class="column">            <span class="item"></span>            <span class="item"></span>            <span class="item"></span>        </div>    </div><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"model":{"jsonPath":"/live2dw/assets/wanko.model.json"},"display":{"position":"right","width":50,"height":100},"mobile":{"show":false},"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-C
      
    
    </summary>
    
    
      <category term="flex" scheme="http://yoursite.com/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>简易项目</title>
    <link href="http://yoursite.com/2019/03/06/%E7%AE%80%E6%98%93%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/03/06/简易项目/</id>
    <published>2019-03-06T12:17:13.000Z</published>
    <updated>2019-04-10T03:05:18.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过复习语法，写的案例"><a href="#通过复习语法，写的案例" class="headerlink" title="通过复习语法，写的案例"></a>通过复习语法，写的案例</h2><blockquote><p>使用的mob的免费接口</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过复习语法，写的案例&quot;&gt;&lt;a href=&quot;#通过复习语法，写的案例&quot; class=&quot;headerlink&quot; title=&quot;通过复习语法，写的案例&quot;&gt;&lt;/a&gt;通过复习语法，写的案例&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用的mob的免费接口&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="复习基本语法" scheme="http://yoursite.com/tags/%E5%A4%8D%E4%B9%A0%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>处理�8位小数数值</title>
    <link href="http://yoursite.com/2018/10/15/%E5%A4%84%E7%90%86%EF%BF%BD8%E4%BD%8D%E5%B0%8F%E6%95%B0%E6%95%B0%E5%80%BC/"/>
    <id>http://yoursite.com/2018/10/15/处理�8位小数数值/</id>
    <published>2018-10-15T03:31:01.000Z</published>
    <updated>2019-04-10T03:05:18.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在最近的需求中，需要前台来计算展示保留8位小数的数值"><a href="#在最近的需求中，需要前台来计算展示保留8位小数的数值" class="headerlink" title="在最近的需求中，需要前台来计算展示保留8位小数的数值"></a>在最近的需求中，需要前台来计算展示保留8位小数的数值</h2><a id="more"></a><h3 id="在刚开始的时候认为很简单，用了网上的这种方法"><a href="#在刚开始的时候认为很简单，用了网上的这种方法" class="headerlink" title="在刚开始的时候认为很简单，用了网上的这种方法"></a>在刚开始的时候认为很简单，用了网上的这种方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//除法函数，用来得到精确的除法结果 </span><br><span class="line">//说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。 </span><br><span class="line">//调用：accDiv(arg1,arg2) </span><br><span class="line">//返回值：arg1除以arg2的精确结果 </span><br><span class="line"> </span><br><span class="line">function accDiv(arg1,arg2)&#123; </span><br><span class="line">var t1=0,t2=0,r1,r2; </span><br><span class="line">try&#123;t1=arg1.toString().split(&quot;.&quot;)[1].length&#125;catch(e)&#123;&#125; </span><br><span class="line">try&#123;t2=arg2.toString().split(&quot;.&quot;)[1].length&#125;catch(e)&#123;&#125; </span><br><span class="line">with(Math)&#123; </span><br><span class="line">r1=Number(arg1.toString().replace(&quot;.&quot;,&quot;&quot;)) </span><br><span class="line">r2=Number(arg2.toString().replace(&quot;.&quot;,&quot;&quot;)) </span><br><span class="line">return (r1/r2)*pow(10,t2-t1); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">//给Number类型增加一个div方法，调用起来更加方便。 </span><br><span class="line">Number.prototype.div = function (arg)&#123; </span><br><span class="line">return accDiv(this, arg); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">//乘法函数，用来得到精确的乘法结果 </span><br><span class="line">//说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。 </span><br><span class="line">//调用：accMul(arg1,arg2) </span><br><span class="line">//返回值：arg1乘以arg2的精确结果 </span><br><span class="line">function accMul(arg1,arg2) </span><br><span class="line">&#123; </span><br><span class="line">var m=0,s1=arg1.toString(),s2=arg2.toString(); </span><br><span class="line">try&#123;m+=s1.split(&quot;.&quot;)[1].length&#125;catch(e)&#123;&#125; </span><br><span class="line">try&#123;m+=s2.split(&quot;.&quot;)[1].length&#125;catch(e)&#123;&#125; </span><br><span class="line">return Number(s1.replace(&quot;.&quot;,&quot;&quot;))*Number(s2.replace(&quot;.&quot;,&quot;&quot;))/Math.pow(10,m) </span><br><span class="line">&#125; </span><br><span class="line">//给Number类型增加一个mul方法，调用起来更加方便。 </span><br><span class="line">Number.prototype.mul = function (arg)&#123; </span><br><span class="line">return accMul(arg, this); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">//加法函数，用来得到精确的加法结果 </span><br><span class="line">//说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。 </span><br><span class="line">//调用：accAdd(arg1,arg2) </span><br><span class="line">//返回值：arg1加上arg2的精确结果 </span><br><span class="line">function accAdd(arg1,arg2)&#123; </span><br><span class="line">var r1,r2,m; </span><br><span class="line">try&#123;r1=arg1.toString().split(&quot;.&quot;)[1].length&#125;catch(e)&#123;r1=0&#125; </span><br><span class="line">try&#123;r2=arg2.toString().split(&quot;.&quot;)[1].length&#125;catch(e)&#123;r2=0&#125; </span><br><span class="line">m=Math.pow(10,Math.max(r1,r2)) </span><br><span class="line">return (arg1*m+arg2*m)/m </span><br><span class="line">&#125; </span><br><span class="line">//给Number类型增加一个add方法，调用起来更加方便。 </span><br><span class="line">Number.prototype.add = function (arg)&#123; </span><br><span class="line">return accAdd(arg,this); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">//减法函数，用来得到精确的减法结果 </span><br><span class="line">//说明：javascript的减法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的减法结果。 </span><br><span class="line">//调用：accSubtr(arg1,arg2) </span><br><span class="line">//返回值：arg1减去arg2的精确结果 </span><br><span class="line">function accSubtr(arg1,arg2)&#123;</span><br><span class="line">var r1,r2,m,n;</span><br><span class="line">try&#123;r1=arg1.toString().split(&quot;.&quot;)[1].length&#125;catch(e)&#123;r1=0&#125;</span><br><span class="line">try&#123;r2=arg2.toString().split(&quot;.&quot;)[1].length&#125;catch(e)&#123;r2=0&#125;</span><br><span class="line">m=Math.pow(10,Math.max(r1,r2));</span><br><span class="line">//动态控制精度长度</span><br><span class="line">n=(r1&gt;=r2)?r1:r2;</span><br><span class="line">return ((arg1*m-arg2*m)/m).toFixed(n);</span><br><span class="line">&#125; </span><br><span class="line">//给Number类型增加一个subtr 方法，调用起来更加方便。 </span><br><span class="line">Number.prototype.subtr = function (arg)&#123; </span><br><span class="line">return accSubtr(arg,this); </span><br><span class="line">&#125; </span><br><span class="line">--------------------- </span><br><span class="line">作者：poker__Face </span><br><span class="line">来源：CSDN </span><br><span class="line">原文：https://blog.csdn.net/u010447573/article/details/50240771?utm_source=copy </span><br><span class="line">版权声明：本文为博主原创文章，转载请附上博文链接！</span><br></pre></td></tr></table></figure><ul><li>不可否认的说这种方法确实解决了的大部分的问题，但是由于我是需要保留8位小数的，因此在为小于8位小数的时候，会出现转换错误的情况</li><li>最后发现是toFixed的问题</li></ul><h3 id="第一步-接下来就需要处理toFixed方法了"><a href="#第一步-接下来就需要处理toFixed方法了" class="headerlink" title="第一步 接下来就需要处理toFixed方法了"></a>第一步 接下来就需要处理toFixed方法了</h3><blockquote><p>比如：8311696194.60937401.toFixed(8) 的值为<br> “8311696194.60937405”</p><ul><li>第一步解决方案<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--通过重写toFixed方法--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--toFixed使用的是银行家舍入规则。 银行家舍入:所谓银行家舍入法，其实质是一种四舍六入五取偶（又称四舍六入五留双）法。 简单来说就是：四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。--&gt;</span><br><span class="line"> Number.prototype.toFixed = function (d) &#123;</span><br><span class="line">        var s = this + &quot;&quot;;</span><br><span class="line">        if (!d) d = 0;</span><br><span class="line">        if (s.indexOf(&quot;.&quot;) == -1) s += &quot;.&quot;;</span><br><span class="line">        s += new Array(d + 1).join(&quot;0&quot;);</span><br><span class="line">        if (new RegExp(&quot;^(-|\\+)?(\\d+(\\.\\d&#123;0,&quot; + (d + 1) + &quot;&#125;)?)\\d*$&quot;).test(s)) &#123;</span><br><span class="line">            var s = &quot;0&quot; + RegExp.$2, pm = RegExp.$1, a = RegExp.$3.length, b = true;</span><br><span class="line">            if (a == d + 2) &#123;</span><br><span class="line">                a = s.match(/\d/g);</span><br><span class="line">                if (parseInt(a[a.length - 1]) &gt; 4) &#123;</span><br><span class="line">                    for (var i = a.length - 2; i &gt;= 0; i--) &#123;</span><br><span class="line">                        a[i] = parseInt(a[i]) + 1;</span><br><span class="line">                        if (a[i] == 10) &#123;</span><br><span class="line">                            a[i] = 0;</span><br><span class="line">                            b = i != 1;</span><br><span class="line">                        &#125; else break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                s = a.join(&quot;&quot;).replace(new RegExp(&quot;(\\d+)(\\d&#123;&quot; + d + &quot;&#125;)\\d$&quot;), &quot;$1.$2&quot;);</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">            if (b) s = s.substr(1);</span><br><span class="line">            return (pm + s).replace(/\.$/, &quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return this + &quot;&quot;;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>但这种方式并不可取，因为我在其他地方用到了这个方法</p></blockquote><ul><li>第二种方式自己写一个方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 重写js Number的toFixed()</span><br><span class="line"> * @param &#123;Number&#125; d 保留几位小数</span><br><span class="line"> * @param &#123;Number&#125; n 要处理的数据</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function toFixed (d, n) &#123;</span><br><span class="line">    var s = n + &quot;&quot;;</span><br><span class="line">    if (!d) d = 0;</span><br><span class="line">    if (s.indexOf(&quot;.&quot;) == -1) s += &quot;.&quot;;</span><br><span class="line">    s += new Array(d + 1).join(&quot;0&quot;);</span><br><span class="line">    if (new RegExp(&quot;^(-|\\+)?(\\d+(\\.\\d&#123;0,&quot; + (d + 1) + &quot;&#125;)?)\\d*$&quot;).test(s)) &#123;</span><br><span class="line">        var s = &quot;0&quot; + RegExp.$2, pm = RegExp.$1, a = RegExp.$3.length, b = true;</span><br><span class="line">        if (a == d + 2) &#123;</span><br><span class="line">            a = s.match(/\d/g);</span><br><span class="line">            if (parseInt(a[a.length - 1]) &gt; 4) &#123;</span><br><span class="line">                for (var i = a.length - 2; i &gt;= 0; i--) &#123;</span><br><span class="line">                    a[i] = parseInt(a[i]) + 1;</span><br><span class="line">                    if (a[i] == 10) &#123;</span><br><span class="line">                        a[i] = 0;</span><br><span class="line">                        b = i != 1;</span><br><span class="line">                    &#125; else break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            s = a.join(&quot;&quot;).replace(new RegExp(&quot;(\\d+)(\\d&#123;&quot; + d + &quot;&#125;)\\d$&quot;), &quot;$1.$2&quot;);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        if (b) s = s.substr(1);</span><br><span class="line">        return (pm + s).replace(/\.$/, &quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return this + &quot;&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>推荐用这个方法来处理，这样可以避免出现错误</strong></p><h3 id="第二步-当然通过上面的处理其实已经可以"><a href="#第二步-当然通过上面的处理其实已经可以" class="headerlink" title="第二步 当然通过上面的处理其实已经可以"></a>第二步 当然通过上面的处理其实已经可以</h3><blockquote><p>因此通过这个方式来 补全不够8位数的</p></blockquote><blockquote><p>当数值超过以后呢会转化成科学计算，要转换成正常的数值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">function convertNum(num_str, defaultFill)&#123; //参数必须为字符串</span><br><span class="line">var resValue = &apos;&apos;, //</span><br><span class="line">power = &apos;&apos;, // 幂</span><br><span class="line">result = null, // 正则校验结果</span><br><span class="line">dotIndex = 0, // </span><br><span class="line">resArr = [], // 值数组</span><br><span class="line">sym = &apos;&apos;; // 正负符号</span><br><span class="line">var numStr = num_str.toString();</span><br><span class="line">//console.log(&apos;numStr[0] = &apos; + numStr[0]);</span><br><span class="line">if(numStr[0] == &apos;-&apos;)&#123; // 如果为负数，转成正数处理，先去掉‘-’号，并保存‘-’.</span><br><span class="line">numStr = numStr.substr(1);</span><br><span class="line">sym = &apos;-&apos;;</span><br><span class="line">&#125;</span><br><span class="line">// console.log(&quot;numStr = &quot; + numStr)</span><br><span class="line">if ((numStr.indexOf(&apos;E&apos;) != -1) ||(numStr.indexOf(&apos;e&apos;) != -1))&#123;</span><br><span class="line">var regExp = new RegExp(&apos;^(((\\d+.?\\d+)|(\\d+))[Ee]&#123;1&#125;([+-]?(\\d+)))$&apos;,&apos;ig&apos;);</span><br><span class="line">result = regExp.exec(numStr);</span><br><span class="line">// console.log(&apos;exp result = &apos; + result);</span><br><span class="line">if (result != null)&#123;</span><br><span class="line">resValue = result[2];</span><br><span class="line">power = result[5];</span><br><span class="line">result = null;</span><br><span class="line">//console.log(&apos;resValue = &apos; + resValue + &quot;, power = &quot; + power);</span><br><span class="line">&#125;</span><br><span class="line">if (!resValue &amp;&amp; !power)&#123;</span><br><span class="line">return num_str;</span><br><span class="line">&#125;</span><br><span class="line">dotIndex = resValue.indexOf(&apos;.&apos;);</span><br><span class="line">resValue = resValue.replace(&apos;.&apos;,&apos;&apos;);</span><br><span class="line">resArr = resValue.split(&apos;&apos;);</span><br><span class="line">if(Number(power) &gt;= 0)&#123;</span><br><span class="line">var subres = resValue.substr(dotIndex);</span><br><span class="line">power = Number(power);</span><br><span class="line">//console.log(&quot;dotIndex = &quot; + dotIndex + &quot;, power = &quot; + power + &quot;, subres = &quot; + subres);</span><br><span class="line">//console.log(&quot;power-subres.length = &quot; + (power-subres.length));</span><br><span class="line">//幂数大于小数点后面的数字位数时,后面加0</span><br><span class="line">for(var i = 0; i &lt; power-subres.length; i++) &#123;</span><br><span class="line">resArr.push(&apos;0&apos;);</span><br><span class="line">&#125;</span><br><span class="line">if(power-subres.length &lt; 0)&#123;</span><br><span class="line">resArr.splice(dotIndex+power, 0, &apos;.&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">power = power.replace(&apos;-&apos;,&apos;&apos;);</span><br><span class="line">power = Number(power);</span><br><span class="line">var zeroSize = 0;</span><br><span class="line">if(dotIndex &gt; -1)&#123;</span><br><span class="line">zeroSize = power-dotIndex+1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">zeroSize = power;</span><br><span class="line">&#125;</span><br><span class="line">//幂数大于等于小数点的index位置,前面加0</span><br><span class="line">for(var i = 1; i &lt;= zeroSize; i++) &#123;</span><br><span class="line">resArr.unshift(&apos;0&apos;);</span><br><span class="line">&#125;</span><br><span class="line">var n = power-dotIndex &gt;= 0 ? 1 : -(power-dotIndex);</span><br><span class="line">resArr.splice(n, 0, &apos;.&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">resArr = num_str.split(&apos;&apos;);</span><br><span class="line">&#125;</span><br><span class="line">//console.log(&quot;resArr = &quot; + resArr);</span><br><span class="line">resValue = resArr.join(&apos;&apos;);</span><br><span class="line">var resultStr = sym + resValue;</span><br><span class="line">//console.log(&quot;result = &quot; + resultStr);</span><br><span class="line">var bit = defaultFill ? 8 : 2;</span><br><span class="line">//console.log(&quot;defaultFill = &quot; + defaultFill + &quot;, bit = &quot; + bit);</span><br><span class="line">// 补全8位小数</span><br><span class="line">var index = resultStr.indexOf(&apos;.&apos;);</span><br><span class="line">if(bit &gt; 0)&#123;</span><br><span class="line">if(index &gt; -1)&#123;</span><br><span class="line">var str = resultStr.substr(index+1);</span><br><span class="line">//console.log(&quot;str = &quot; + str);</span><br><span class="line">for(var i = 0; i &lt; bit - str.length; i++)&#123;</span><br><span class="line">resultStr+=&apos;0&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">            resultStr+=&apos;.&apos;;</span><br><span class="line">for(var i = 0; i &lt; bit; i++)&#123;</span><br><span class="line">resultStr+=&apos;0&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return resultStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><blockquote><p>因此就将上面网上找的加减乘除方法舍去引用了插件 npm install number-precision –save</p></blockquote><blockquote><p>网站地址 <a href="https://github.com/nefe/number-precision" target="_blank" rel="noopener">https://github.com/nefe/number-precision</a></p></blockquote><blockquote><p>通过这个插件的方法处理数据,将科学计数的转换成普通得</p></blockquote><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><blockquote><p>用上面的方法其实已经可以将8位或者小于8位的小数，正常显示了</p></blockquote><blockquote><p>当大于8位小数的则不行，会超出去</p></blockquote><blockquote><p>因此需要截取处里（根据需求，在8位数后有值就在第8位加1）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">numFixed(num) &#123; </span><br><span class="line">   let left = num.split(&apos;.&apos;)[0]</span><br><span class="line">   let right = num.split(&apos;.&apos;)[1].slice(0, 8)</span><br><span class="line">   let nine = num.split(&apos;.&apos;)[1].slice(8, 16)</span><br><span class="line">   let res = left + &apos;.&apos; + right;</span><br><span class="line"></span><br><span class="line">   // 如果nine的值是大于1的就必须在第八位加+</span><br><span class="line">   if(Number(nine) &gt; 0)&#123;</span><br><span class="line">       res = NP.plus(Number(res), 0.00000001);</span><br><span class="line">   &#125;</span><br><span class="line">   return res;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="最后通过判断"><a href="#最后通过判断" class="headerlink" title="最后通过判断"></a>最后通过判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 获取当前的值小数点后有多少位--&gt;</span><br><span class="line">    var n = convertNum(total.toString(),false);</span><br><span class="line">    var l = n.toString().split(&quot;.&quot;)[1].length;</span><br><span class="line">&lt;!--通过判断长度，确定执行的代码--&gt;</span><br><span class="line"></span><br><span class="line"> if( l &gt; 8 )&#123;</span><br><span class="line">    this.costTotals = RewritetoFixed(8,convertNum(total.toString(),false));</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    this.costTotals = convertNum(total.toString(),true);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><blockquote><p>当前没有遇到错误</p></blockquote><blockquote><p>如果前台处理这种数据，最好能处理下toFixed方法，毕竟超出一定位数，精确度就会不够</p></blockquote><blockquote><p>最后执行的结果不排除有数值会精确不到</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在最近的需求中，需要前台来计算展示保留8位小数的数值&quot;&gt;&lt;a href=&quot;#在最近的需求中，需要前台来计算展示保留8位小数的数值&quot; class=&quot;headerlink&quot; title=&quot;在最近的需求中，需要前台来计算展示保留8位小数的数值&quot;&gt;&lt;/a&gt;在最近的需求中，需要前台来计算展示保留8位小数的数值&lt;/h2&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
</feed>
